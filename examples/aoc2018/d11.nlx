fn main() {
    fn power(x, y) {
        let serial = 6548;
        let rack_id = x + 10;
        let power = rack_id * y;
        power += serial;
        power *= rack_id;
        power = (power / 100):floor() % 10;
        power -= 5;
        return power;
    }
    let partial_sums = [[]];
    for y in 0..301 {partial_sums[0][y] = 0;}
    for x in 1..301 {
        partial_sums[x] = [0];
        for y in 1..301 {
            partial_sums[x][y] = power(x, y) +
                partial_sums[x-1][y] +
                partial_sums[x][y-1] -
                partial_sums[x-1][y-1];
        }
    }

    let max_power = 0;
    let max_x = 0;
    let max_y = 0;
    for x in 1..299 {
        for y in 1..299 {
            let total = partial_sums[x+2][y+2] - partial_sums[x-1][y+2] - partial_sums[x+2][y-1] + partial_sums[x-1][y-1];
            if total > max_power {
                max_power = total;
                max_x = x;
                max_y = y;
            }
        }
    }
    print "Part 1: " + max_x:to_string() + "," + max_y:to_string();
    
    let max_power = 0;
    let max_x = 0;
    let max_y = 0;
    let max_size = 0;
    for size in 1..300 {
        for x in 1..(302-size) {
            for y in 1..(302-size) {
                let total = partial_sums[x+size-1][y+size-1] - partial_sums[x-1][y+size-1] - partial_sums[x+size-1][y-1] + partial_sums[x-1][y-1];
                if total > max_power {
                    max_power = total;
                    max_x = x;
                    max_y = y;
                    max_size = size;
                }
            }
        }
    }
    print "Part 2: " + max_x:to_string() + "," + max_y:to_string() + "," + max_size:to_string();
}
