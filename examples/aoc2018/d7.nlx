fn main() {
    let input = "d7input.txt":readFile():split("\n");
    let re = "Step ([A-Z]) must be finished before step ([A-Z]) can begin.":regex();
    let graph = #{};
    for _, line in input {
        if line:len() == 0 {continue}
        let matches = re:match(line);
        if !graph[matches[1][0]] {
            graph[matches[1][0]] = [];
        }
        if !graph[matches[2][0]] {
            graph[matches[2][0]] = [];
        }
        graph[matches[2][0]]:push(matches[1][0]);
    }

    let done_steps  = #{};
    let candidates = [];
    for step, dependencies in graph {
    	let doable = true;
    	for _, d in dependencies {
	    doable = doable && done_steps[d];
	}
	if doable {candidates:push(step);}
    }
    let out = "";
    while candidates:len() > 0 {
        candidates:sort();
        let next = candidates[0];
        done_steps[next] = true;
        out += next;
        candidates:resize(0);
        for step, dependencies in graph {
            if done_steps[step] {continue;}
    	    let doable = true;
    	    for _, d in dependencies {
	        doable = doable && done_steps[d];
	    }
	    if doable {candidates:push(step);}
        }
    }
    print out;

    let running_jobs = [];
    let running_jobs_n = 0;
    let done_steps = #{};
    let queued_steps = #{};
    let time = 0;
    loop {
        // Find completable jobs
        candidates:resize(0);
        for step, dependencies in graph {
            if queued_steps[step] {continue;}
    	    let doable = true;
    	    for _, d in dependencies {
	        doable = doable && done_steps[d];
	    }
	    if doable {candidates:push(step);}
        }
        if candidates:len() == 0 && running_jobs_n == 0 {
            print time;
            break;
        }
        // Queue up jobs with available elves
        let candidates_n = 0;
        while running_jobs_n < 5 && candidates_n < candidates:len() {
            running_jobs[running_jobs_n] = [candidates[candidates_n], time + 60 + (candidates[candidates_n] - 'A') + 1];
            queued_steps[candidates[candidates_n]] = true;
            running_jobs_n += 1;
            candidates_n += 1;
        }
        // Advance time to next finishing job and do eet.
        let next_time = 999999999;
        let next_j = -1;
        for i in 0..running_jobs_n {
            let j = running_jobs[i];
            if j[1] < next_time {
                next_time = j[1];
                next_j = i;
            }
        }
        time = next_time;
        done_steps[running_jobs[next_j][0]] = true;
        running_jobs[next_j] = running_jobs[running_jobs_n-1];
        running_jobs_n -= 1;
    }
}
